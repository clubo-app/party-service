// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: parties.sql

package repository

import (
	"context"
	"database/sql"
)

const createParty = `-- name: CreateParty :one
INSERT INTO parties (
  id, 
  user_id,
  title,
  is_public,
  location,
  street_address,
  postal_code,
  state,
  country,
  start_date,
  end_date
) VALUES (
  $1, $2, $3, $4, ST_GeomFromWKB($5), $6, $7, $8, $9, $10, $11
)
RETURNING id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date
`

type CreatePartyParams struct {
	ID            string
	UserID        string
	Title         string
	IsPublic      bool
	StGeomfromwkb interface{}
	StreetAddress sql.NullString
	PostalCode    sql.NullString
	State         sql.NullString
	Country       sql.NullString
	StartDate     sql.NullTime
	EndDate       sql.NullTime
}

func (q *Queries) CreateParty(ctx context.Context, arg CreatePartyParams) (Party, error) {
	row := q.db.QueryRow(ctx, createParty,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.IsPublic,
		arg.StGeomfromwkb,
		arg.StreetAddress,
		arg.PostalCode,
		arg.State,
		arg.Country,
		arg.StartDate,
		arg.EndDate,
	)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsPublic,
		&i.Location,
		&i.StreetAddress,
		&i.PostalCode,
		&i.State,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteParty = `-- name: DeleteParty :one
DELETE FROM parties
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date
`

type DeletePartyParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteParty(ctx context.Context, arg DeletePartyParams) (Party, error) {
	row := q.db.QueryRow(ctx, deleteParty, arg.ID, arg.UserID)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsPublic,
		&i.Location,
		&i.StreetAddress,
		&i.PostalCode,
		&i.State,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getManyParties = `-- name: GetManyParties :many
SELECT id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date FROM parties
WHERE id IN($1::text[])
LIMIT $2
`

type GetManyPartiesParams struct {
	Ids   []string
	Limit int32
}

func (q *Queries) GetManyParties(ctx context.Context, arg GetManyPartiesParams) ([]Party, error) {
	rows, err := q.db.Query(ctx, getManyParties, arg.Ids, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Party
	for rows.Next() {
		var i Party
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.IsPublic,
			&i.Location,
			&i.StreetAddress,
			&i.PostalCode,
			&i.State,
			&i.Country,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPartiesByUser = `-- name: GetPartiesByUser :many
SELECT id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date FROM parties
WHERE user_id = $1
ORDER BY id desc
LIMIT $2
OFFSET $3
`

type GetPartiesByUserParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) GetPartiesByUser(ctx context.Context, arg GetPartiesByUserParams) ([]Party, error) {
	rows, err := q.db.Query(ctx, getPartiesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Party
	for rows.Next() {
		var i Party
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.IsPublic,
			&i.Location,
			&i.StreetAddress,
			&i.PostalCode,
			&i.State,
			&i.Country,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPartiesInRadius = `-- name: GetPartiesInRadius :many
SELECT id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date
FROM parties
WHERE ST_DWithin(
  location,
  ST_GeomFromWKB($1::text),
  $2::int
) LIMIT $3
`

type GetPartiesInRadiusParams struct {
	Bytes  string
	Radius int32
	Limit  int32
}

func (q *Queries) GetPartiesInRadius(ctx context.Context, arg GetPartiesInRadiusParams) ([]Party, error) {
	rows, err := q.db.Query(ctx, getPartiesInRadius, arg.Bytes, arg.Radius, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Party
	for rows.Next() {
		var i Party
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.IsPublic,
			&i.Location,
			&i.StreetAddress,
			&i.PostalCode,
			&i.State,
			&i.Country,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParty = `-- name: GetParty :one
SELECT id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date FROM parties
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetParty(ctx context.Context, id string) (Party, error) {
	row := q.db.QueryRow(ctx, getParty, id)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsPublic,
		&i.Location,
		&i.StreetAddress,
		&i.PostalCode,
		&i.State,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const updateParty = `-- name: UpdateParty :one
UPDATE parties SET
    title = $1,
    street_address = $2,
    postal_code = $3,
    state = $4,
    country = $5,
    start_date = $6,
    end_date = $7
WHERE id = $8
RETURNING id, user_id, title, is_public, location, street_address, postal_code, state, country, start_date, end_date
`

type UpdatePartyParams struct {
	Title         sql.NullString
	StreetAddress sql.NullString
	PostalCode    sql.NullString
	State         sql.NullString
	Country       sql.NullString
	StartDate     sql.NullTime
	EndDate       sql.NullTime
	ID            string
}

func (q *Queries) UpdateParty(ctx context.Context, arg UpdatePartyParams) (Party, error) {
	row := q.db.QueryRow(ctx, updateParty,
		arg.Title,
		arg.StreetAddress,
		arg.PostalCode,
		arg.State,
		arg.Country,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var i Party
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.IsPublic,
		&i.Location,
		&i.StreetAddress,
		&i.PostalCode,
		&i.State,
		&i.Country,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
